{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "n01jFC096JGL"
   },
   "source": [
    "# Data 100 - [Final Project ](http://www.ds100.org/sp20/resources/assets/final_proj/final_proj_spec.pdf)\n",
    "## Spring 2020\n",
    "\n",
    "### Saketh Kollu, Anita Shen, Nicholas Wang\n",
    "\n",
    "Dataset: [Contraceptive](https://archive.ics.uci.edu/ml/datasets/Contraceptive+Method+Choice)\n",
    "\n",
    "[Rubric](https://d1b10bmlvqabco.cloudfront.net/attach/k4zyqkjkyt33a2/j4f6z772zscwl/k9ns0abjn95w/Undergrad_DS_100_Final_Project_Rubric_Release.pdf)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "JPlskuWO9tSM"
   },
   "source": [
    "# Guiding Questions\n",
    "\n",
    "1. How is the contraceptive method used related to the number of children?\n",
    "2. Can we build a model to predict the type of contraceptive method used by an individual with our given features?\n",
    "3. Which feature affects the contraceptive method used the most?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 71
    },
    "colab_type": "code",
    "id": "3ToUI7sN7_OG",
    "outputId": "64a5b8d4-81df-42fb-d09f-4c35e8435869"
   },
   "outputs": [],
   "source": [
    "# Library imports\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "from IPython.display import Markdown as md\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "AWMYm2NV8c2M",
    "outputId": "fb0b5e61-8062-4934-aef2-8b742f730c7d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wife_age</th>\n",
       "      <th>wife_education</th>\n",
       "      <th>husband_education</th>\n",
       "      <th>num_child</th>\n",
       "      <th>wife_religion</th>\n",
       "      <th>wife_work</th>\n",
       "      <th>husband_occupation</th>\n",
       "      <th>standard_living</th>\n",
       "      <th>media_exposure</th>\n",
       "      <th>contraceptive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>684</th>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>632</th>\n",
       "      <td>39</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>38</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     wife_age  wife_education  husband_education  num_child  wife_religion  \\\n",
       "684        40               4                  4          2              0   \n",
       "632        39               4                  4          3              0   \n",
       "113        31               2                  2          4              1   \n",
       "79         38               4                  4          1              1   \n",
       "865        25               2                  3          2              1   \n",
       "\n",
       "     wife_work  husband_occupation  standard_living  media_exposure  \\\n",
       "684          0                   1                4               0   \n",
       "632          1                   1                4               0   \n",
       "113          1                   3                3               0   \n",
       "79           0                   1                4               0   \n",
       "865          1                   3                1               0   \n",
       "\n",
       "     contraceptive  \n",
       "684              3  \n",
       "632              2  \n",
       "113              1  \n",
       "79               1  \n",
       "865              3  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data imports\n",
    "\n",
    "data = pd.read_csv(\"./contraceptive_for_students.csv\")\n",
    "data.sample(5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Attribute Information:\n",
    "\n",
    "1. Wife's age (numerical)\n",
    "2. Wife's education (categorical) 1=low, 2, 3, 4=high\n",
    "3. Husband's education (categorical) 1=low, 2, 3, 4=high\n",
    "4. Number of children ever born (numerical)\n",
    "5. Wife's religion (binary) 0=Non-Islam, 1=Islam\n",
    "6. Wife's now working? (binary) 0=Yes, 1=No\n",
    "7. Husband's occupation (categorical) 1, 2, 3, 4\n",
    "8. Standard-of-living index (categorical) 1=low, 2, 3, 4=high\n",
    "9. Media exposure (binary) 0=Good, 1=Not good\n",
    "10. Contraceptive method used (class attribute) 1=No-use, 2=Long-term, 3=Short-term\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 297
    },
    "colab_type": "code",
    "id": "QhXOuFqrNlMv",
    "outputId": "596eedb3-8d73-4eff-e2a9-b8cee06879b2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wife_age</th>\n",
       "      <th>wife_education</th>\n",
       "      <th>husband_education</th>\n",
       "      <th>num_child</th>\n",
       "      <th>wife_religion</th>\n",
       "      <th>wife_work</th>\n",
       "      <th>husband_occupation</th>\n",
       "      <th>standard_living</th>\n",
       "      <th>media_exposure</th>\n",
       "      <th>contraceptive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "      <td>1473.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>32.538357</td>\n",
       "      <td>2.958588</td>\n",
       "      <td>3.429735</td>\n",
       "      <td>3.261371</td>\n",
       "      <td>0.850645</td>\n",
       "      <td>0.749491</td>\n",
       "      <td>2.137814</td>\n",
       "      <td>3.133741</td>\n",
       "      <td>0.073999</td>\n",
       "      <td>1.919891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.227245</td>\n",
       "      <td>1.014994</td>\n",
       "      <td>0.816349</td>\n",
       "      <td>2.358549</td>\n",
       "      <td>0.356559</td>\n",
       "      <td>0.433453</td>\n",
       "      <td>0.864857</td>\n",
       "      <td>0.976161</td>\n",
       "      <td>0.261858</td>\n",
       "      <td>0.876376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>26.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>32.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>39.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>49.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          wife_age  wife_education  husband_education    num_child  \\\n",
       "count  1473.000000     1473.000000        1473.000000  1473.000000   \n",
       "mean     32.538357        2.958588           3.429735     3.261371   \n",
       "std       8.227245        1.014994           0.816349     2.358549   \n",
       "min      16.000000        1.000000           1.000000     0.000000   \n",
       "25%      26.000000        2.000000           3.000000     1.000000   \n",
       "50%      32.000000        3.000000           4.000000     3.000000   \n",
       "75%      39.000000        4.000000           4.000000     4.000000   \n",
       "max      49.000000        4.000000           4.000000    16.000000   \n",
       "\n",
       "       wife_religion    wife_work  husband_occupation  standard_living  \\\n",
       "count    1473.000000  1473.000000         1473.000000      1473.000000   \n",
       "mean        0.850645     0.749491            2.137814         3.133741   \n",
       "std         0.356559     0.433453            0.864857         0.976161   \n",
       "min         0.000000     0.000000            1.000000         1.000000   \n",
       "25%         1.000000     0.000000            1.000000         3.000000   \n",
       "50%         1.000000     1.000000            2.000000         3.000000   \n",
       "75%         1.000000     1.000000            3.000000         4.000000   \n",
       "max         1.000000     1.000000            4.000000         4.000000   \n",
       "\n",
       "       media_exposure  contraceptive  \n",
       "count     1473.000000    1473.000000  \n",
       "mean         0.073999       1.919891  \n",
       "std          0.261858       0.876376  \n",
       "min          0.000000       1.000000  \n",
       "25%          0.000000       1.000000  \n",
       "50%          0.000000       2.000000  \n",
       "75%          0.000000       3.000000  \n",
       "max          1.000000       3.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 255
    },
    "colab_type": "code",
    "id": "7CKfp8pRN577",
    "outputId": "40898189-d794-4193-b9e7-a5ba36e0ad6f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1473, 10)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How is the Contraceptive method used related to the number of children?\n",
    "\n",
    "### Initial Predictions\n",
    "Obviously, the number of children a mother has is in no way shape or form predictive of how effective a contraceptive type is. However, we can see if there are any relation between a mother's choice of contraceptive and usual number of children she might have. Our initial predictions are that there might be a higher distribution of number of children for mother's that don't use contraceptive than those that use them. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wife_age</th>\n",
       "      <th>wife_education</th>\n",
       "      <th>husband_education</th>\n",
       "      <th>num_child</th>\n",
       "      <th>wife_religion</th>\n",
       "      <th>wife_work</th>\n",
       "      <th>husband_occupation</th>\n",
       "      <th>standard_living</th>\n",
       "      <th>media_exposure</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>contraceptive</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>629</td>\n",
       "      <td>629</td>\n",
       "      <td>629</td>\n",
       "      <td>629</td>\n",
       "      <td>629</td>\n",
       "      <td>629</td>\n",
       "      <td>629</td>\n",
       "      <td>629</td>\n",
       "      <td>629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>333</td>\n",
       "      <td>333</td>\n",
       "      <td>333</td>\n",
       "      <td>333</td>\n",
       "      <td>333</td>\n",
       "      <td>333</td>\n",
       "      <td>333</td>\n",
       "      <td>333</td>\n",
       "      <td>333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>511</td>\n",
       "      <td>511</td>\n",
       "      <td>511</td>\n",
       "      <td>511</td>\n",
       "      <td>511</td>\n",
       "      <td>511</td>\n",
       "      <td>511</td>\n",
       "      <td>511</td>\n",
       "      <td>511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               wife_age  wife_education  husband_education  num_child  \\\n",
       "contraceptive                                                           \n",
       "1                   629             629                629        629   \n",
       "2                   333             333                333        333   \n",
       "3                   511             511                511        511   \n",
       "\n",
       "               wife_religion  wife_work  husband_occupation  standard_living  \\\n",
       "contraceptive                                                                  \n",
       "1                        629        629                 629              629   \n",
       "2                        333        333                 333              333   \n",
       "3                        511        511                 511              511   \n",
       "\n",
       "               media_exposure  \n",
       "contraceptive                  \n",
       "1                         629  \n",
       "2                         333  \n",
       "3                         511  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby('contraceptive').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's begin by looking at the distribution of number of children for ALL mothers in our sample data set. We noticed that the entire distribution is right skewed ranging from 0 to 16 and with a mean and median at 3 children."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Range (0, 16)\n",
      "Mean number of children 3.2613713509843856\n",
      "Median number of children 3.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#first looking at the distribution of all number of children\n",
    "num_child = data['num_child']\n",
    "\n",
    "plt.xlabel(\"Number of Children\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Distribution of the number of children of all mothers\")\n",
    "num_child.hist()\n",
    "\n",
    "print(\"Range\", (min(num_child), max(num_child)))\n",
    "print(\"Mean number of children\",num_child.mean())\n",
    "print(\"Median number of children\", num_child.median())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we will separate our data by the type of contraceptive each mother uses. As a reminder, \n",
    "- type 1 = no use of contraceptive\n",
    "- type 2 = long-term contraceptive\n",
    "- type 3 = short-term contraceptive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#separate by contraceptive types\n",
    "type1 = data.loc[data['contraceptive'] == 1]\n",
    "type2 = data.loc[data['contraceptive'] == 2]\n",
    "type3 = data.loc[data['contraceptive'] == 3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Type 1 Mothers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Range (0, 12)\n",
      "Mean number of children 2.934817170111288\n",
      "Median number of children 2.0\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "type1Children = type1['num_child']\n",
    "plt.xlabel(\"Number of Children\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Distribution of the number of children of Mothers that Don't Use Contraceptives (type1)\")\n",
    "type1Children.hist()\n",
    "\n",
    "print(\"Range\", (min(type1Children), max(type1Children)))\n",
    "print(\"Mean number of children\",type1Children.mean())\n",
    "print(\"Median number of children\", type1Children.median())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Type 2 Mothers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Range (1, 13)\n",
      "Mean number of children 3.7387387387387387\n",
      "Median number of children 3.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "type2Children = type2['num_child']\n",
    "plt.xlabel(\"Number of Children\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Distribution of the number of children of Mothers that use Long-term Contraceptives (type2)\")\n",
    "type2Children.hist()\n",
    "\n",
    "print(\"Range\", (min(type2Children), max(type2Children)))\n",
    "print(\"Mean number of children\",type2Children.mean())\n",
    "print(\"Median number of children\", type2Children.median())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Type 3 Mothers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Range (0, 16)\n",
      "Mean number of children 3.352250489236791\n",
      "Median number of children 3.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "type3Children = type3['num_child']\n",
    "plt.xlabel(\"Number of Children\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Distribution of the number of children of Mothers that use Short-term Contraceptives (type3)\")\n",
    "type3Children.hist()\n",
    "\n",
    "print(\"Range\", (min(type3Children), max(type3Children)))\n",
    "print(\"Mean number of children\",type3Children.mean())\n",
    "print(\"Median number of children\", type3Children.median())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a summary of our findings:\n",
    "    - Type 1 (no contraceptive Used)\n",
    "        - Range in (0, 12)\n",
    "        - Mean number of children 2.93\n",
    "        - Median number of children 2.0\n",
    "        - Out of all the types, graph has the highest count of mothers that have 2 or less children\n",
    "    - Type 2 (Long-term Contraceptive Type)\n",
    "        - Range (1, 13)\n",
    "        - Mean number of children 3.74\n",
    "        - Median number of children 3.0\n",
    "        - The graph is the most obvious of the three that has a step-type descent. This graph is the clearest in showing there are decreasing counts of type-2 mothers as the number of children increase.\n",
    "    - Type 3 (Short-term Contraceptive Type)\n",
    "        - Range (0, 16)\n",
    "        - Mean number of children 3.35\n",
    "        - Median number of children 3.0\n",
    "        - This graph has the largest range of all of the graphs and clear peak at 3 children."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Number of Children')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "child_bins = range(0, 18)\n",
    "plt.hist(type1Children, child_bins, density=True, histtype='bar', label = 'No Use')\n",
    "plt.hist(type2Children, child_bins, density=True, histtype='bar', label = 'Long-term')\n",
    "plt.hist(type3Children, child_bins, density=True, histtype='bar', label = 'Short-term')\n",
    "plt.legend(prop={'size': 10})\n",
    "\n",
    "plt.title('Distribution of Number of Children of Mothers that use Different Contraceptive Methods \\n')\n",
    "plt.ylabel(\"Proportion of mothers\")\n",
    "plt.xlabel(\"Number of Children\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Number of Children')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(type1Children, child_bins, density=True, histtype='step', stacked=True, fill=False, label = 'No Use')\n",
    "plt.hist(type2Children, child_bins, density=True, histtype='step', stacked=True, fill=False, label = 'Long-term')\n",
    "plt.hist(type3Children, child_bins, density=True, histtype='step', stacked=True, fill=False, label = 'Short-term')\n",
    "plt.legend(prop={'size': 10})\n",
    "\n",
    "plt.title('Stack Steps Distribution of Number of Children of Mothers that use Different Contraceptive Methods \\n')\n",
    "plt.ylabel(\"Proportion of mothers\")\n",
    "plt.xlabel(\"Number of Children\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Surprisingly, the median number of children of mothers that don't use contraceptives is lower than those that use either short-term or long-term contraceptives. This may be due to the larger sample size of mothers that don't use contraceptives at 629 mothers versus mothers that use contraceptives(333 + 511).\n",
    "All of the distributions are heavily right skewed though again, the range of the number of children is largest for mothers that use short-term contraceptives. (0-16)short-term vs (1,13)long-term, and (0,12) no-use. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use of Contraceptive vs No Use"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we want to compare mothers that use contraceptive vs those that do not. More specifically, those that do not use contraceptive will fall in the type 1 category with 629 mothers, and those that use contraceptive fall in the type 2 and 3 cateogry with (333 + 511) = 544 mothers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "contraceptiveNoUse = data.loc[data['contraceptive'] == 1]\n",
    "contraceptiveUse = data.loc[data['contraceptive'] > 1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean number of children for No Use 2.934817170111288\n",
      "Median number of children for No Use 2.0\n",
      "Mean number of children for Use 3.504739336492891\n",
      "Median number of children for Use 3.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel(\"Number of Children\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Distribution of the number of children of Mothers that use Different types of Contraceptive\")\n",
    "plt.hist(contraceptiveNoUse['num_child'], bins = child_bins, alpha = 0.5, label = 'No Use')\n",
    "plt.hist(contraceptiveUse['num_child'], bins = child_bins, alpha = 0.5, label = 'Contraceptives Used')\n",
    "plt.legend(prop={'size': 10})\n",
    "\n",
    "\n",
    "print(\"Mean number of children for No Use\", contraceptiveNoUse['num_child'].mean())\n",
    "print(\"Median number of children for No Use\", contraceptiveNoUse['num_child'].median())\n",
    "\n",
    "print(\"Mean number of children for Use\", contraceptiveUse['num_child'].mean())\n",
    "print(\"Median number of children for Use\", contraceptiveUse['num_child'].median())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interestingly, the distribution of mothers that use contraceptives is more shifted to the right than those that do not use contraceptives. The median of mothers that do not use contraceptives is at 2 children while 3 children for mothers that use contraceptives. This corresponds with our findings from the earlier section. Both distribution are right skewed. Our initial prediction of mothers that use contraceptives relating with lower number of children has been proven incorrect in our sample data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "h6-nWS7_7jw3"
   },
   "source": [
    "## Data Transformations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Can we build a multinomial logistic regression to predict which type of contraceptive method used by an individual given certain variables?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select Features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we have a mix of categorical and numerical features, we need to seperate them and one hot encode all the categorical features so that our logistic regression model can treat them properly.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = [\"wife_age\", \"wife_education\", \"husband_education\", \"num_child\", \"wife_religion\", \"wife_work\", \"husband_occupation\", \"standard_living\", \"media_exposure\"]\n",
    "\n",
    "num_features = [\"wife_age\", \"num_child\"]\n",
    "cat_features = [\"wife_education\", \"husband_education\", \"wife_religion\", \"wife_work\", \"husband_occupation\", \"standard_living\", \"media_exposure\"]\n",
    "\n",
    "#features = [\"wife_age\", \"wife_education\", \"wife_religion\", \"wife_work\"]\n",
    "\n",
    "\n",
    "response = [\"contraceptive\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### One Hot Encode Categorical Features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the OneHotEncoder, all categorical features are one hot encoded and turned into a DataFrame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "oh_enc = OneHotEncoder()\n",
    "oh_enc.fit(data[cat_features])\n",
    "cat_Data = pd.DataFrame(oh_enc.transform(data[cat_features]).todense())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge Numerical and Categorical Features (OHE) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Numerical and one hot encoded features are merged into a single dataframe that can be passed into the model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wife_age</th>\n",
       "      <th>num_child</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>...</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>43</td>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>42</td>\n",
       "      <td>9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36</td>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   wife_age  num_child    0    1    2    3    4    5    6    7 ...    12   13  \\\n",
       "0        24          3  0.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0 ...   0.0  1.0   \n",
       "1        45         10  1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0 ...   0.0  0.0   \n",
       "2        43          7  0.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0 ...   0.0  0.0   \n",
       "3        42          9  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0 ...   0.0  0.0   \n",
       "4        36          8  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0 ...   0.0  0.0   \n",
       "\n",
       "    14   15   16   17   18   19   20   21  \n",
       "0  0.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  \n",
       "1  1.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  \n",
       "2  1.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  \n",
       "3  1.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  \n",
       "4  1.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged = pd.concat([data[num_features], cat_Data], axis = 1)\n",
    "merged.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train-Test Split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our data is split into training and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Data Size:  1178\n",
      "Test Data Size:  295\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(merged, data[response], test_size = 0.20)\n",
    "print(\"Training Data Size: \", len(X_train))\n",
    "print(\"Test Data Size: \", len(X_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def accuracy(given, predicted):\n",
    "    correct = 0\n",
    "\n",
    "    for i in range(0, len(given)):\n",
    "        if given[\"contraceptive\"].iloc[i] == predicted[i]:\n",
    "            correct += 1\n",
    "            \n",
    "    return correct / len(given)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression Model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Creating and Fitting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression, LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LogisticRegression(multi_class = 'multinomial', solver = 'saga',max_iter=100)\n",
    "#model = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='multinomial', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='saga', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data prediction accuracy: 0.538200\n"
     ]
    }
   ],
   "source": [
    "y_fitted = model.predict(X_train)\n",
    "\n",
    "log_train_accuracy = np.round(accuracy(y_train, y_fitted), 5)\n",
    "\n",
    "print(\"Training data prediction accuracy: %f\" % accuracy(y_train, y_fitted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data 5 Fold Cross Validation Score for Logistic Regression Model: 0.512802\n"
     ]
    }
   ],
   "source": [
    "scores = cross_val_score(model, X_train, y_train, cv = 5)\n",
    "\n",
    "log_cv_accuracy = np.round(np.mean(scores), 5)\n",
    "\n",
    "print(\"Train data 5 Fold Cross Validation Score for Logistic Regression Model: %f\" % np.mean(scores));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data prediction accuracy: 0.501695\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(X_test)\n",
    "\n",
    "log_test_accuracy = np.round(accuracy(y_test, y_pred), 5)\n",
    "\n",
    "print(\"Test data prediction accuracy: %f\" % accuracy(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Creating and Fitting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Recreate date without OHE\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(data[features], data[response], test_size = 0.20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "forest = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=10,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forest.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data prediction accuracy: 0.932937\n"
     ]
    }
   ],
   "source": [
    "y_fitted = forest.predict(X_train)\n",
    "\n",
    "rf_train_accuracy = np.round(accuracy(y_train, y_fitted), 5)\n",
    "\n",
    "print(\"Training data prediction accuracy: %f\" % accuracy(y_train, y_fitted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data 5 Fold Cross Validation Score for Random Forest Classifier: 0.513624\n"
     ]
    }
   ],
   "source": [
    "scores = cross_val_score(forest, X_train, y_train, cv = 5)\n",
    "\n",
    "rf_cv_accuracy = np.round(np.mean(scores), 5)\n",
    "\n",
    "print(\"Train data 5 Fold Cross Validation Score for Random Forest Classifier: %f\" % np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data prediction accuracy: 0.505085\n"
     ]
    }
   ],
   "source": [
    "y_pred = forest.predict(X_test)\n",
    "\n",
    "rf_test_accuracy = np.round(accuracy(y_test, y_pred), 5)\n",
    "\n",
    "print(\"Test data prediction accuracy: %f\" % accuracy(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "| Model         | Training Set Accuracy | Cross Validation Score | Testing Set Accuracy |\n",
       "|---------------|-----------------------|------------------------|----------------------|\n",
       "| Logistic     | 0.5382              | 0.5128              | 0.50169            |\n",
       "| Random Forest | 0.93294              | 0.51362               | 0.50508             |"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "md('''| Model         | Training Set Accuracy | Cross Validation Score | Testing Set Accuracy |\n",
    "|---------------|-----------------------|------------------------|----------------------|\n",
    "| Logistic     | {}              | {}              | {}            |\n",
    "| Random Forest | {}              | {}               | {}             |'''.format(log_train_accuracy,\n",
    "                                                                                   log_cv_accuracy,\n",
    "                                                                                   log_test_accuracy,\n",
    "                                                                                   rf_train_accuracy,\n",
    "                                                                                   rf_cv_accuracy,\n",
    "                                                                                   rf_test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Logistic Regression Evaluation\n",
    "\n",
    "Training accuracy, Cross Validation and Testing Accuracy are all within a few percentage points of each other, suggesting that our model has reached the point where if we add more features we may go into the terratory of overfitting. Although the accuracy is pretty low at 50%, since we are choosing between 3 categories, the random chance of guessing the right contraceptive category for a mother is 33%, while our model predicts on test data with 52%. Since we used all the features we had available in this model, we want to see what single feature or set of features can do better than using all our features.\n",
    "\n",
    "#### Random Forest Evaluation\n",
    "\n",
    "Training accuracy is significantly higher than Cross Validation and Testing Accuracy suggesting that our model has been overfit to our data, a drawback of descision trees in general but we  had hoped the effect of which would have been reduced by using a Random Forest. This draws us to the conclusion that the Random Forest, although it has overfit our training data, does not perform significantly worse than our Logistic Regression model, sitting just shy of 50% accuracy, still above the 33% accuracy achieved by randomly guessing what contraceptive type a mother uses. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Improvements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Going back to our logistic regression model, we realized that doing logistic regression on all column variables lacks something, since we are maximizing our prediction at 53%. Let's analyze what we did so far. Essentially, we used all of the variables in our model without considering whether any would be beneficial or not. This leads us to our next guiding question: are there variables we can yeet? Should we not consider certain column variables because they might be causing this model to perform worse? We analyzed this question by examining the extent to which each column variable affects the prediction outcome. In other words, we iterated over all the columns and performed a logistic regression for each column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wife_education 0.43728813559322033\n",
      "husband_education 0.4406779661016949\n",
      "wife_religion 0.43389830508474575\n",
      "wife_work 0.4406779661016949\n",
      "husband_occupation 0.4406779661016949\n",
      "standard_living 0.4406779661016949\n",
      "media_exposure 0.4406779661016949\n",
      "contraceptive 1.0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "train, test = train_test_split(data, test_size=0.20, random_state=42)\n",
    "\n",
    "# Store values for visualization\n",
    "categories = []\n",
    "predictions = []\n",
    "\n",
    "for col in data:\n",
    "    \n",
    "    # Exclude numerical values\n",
    "    if (col == 'wife_age' or col == 'num_child'):\n",
    "        continue\n",
    "    \n",
    "    oh_enc = OneHotEncoder(categories=\"auto\")\n",
    "    oh_enc.fit(train[[col]])\n",
    "    X_train = oh_enc.transform(train[[col]]).todense()\n",
    "    Y_train = train[\"contraceptive\"]\n",
    "\n",
    "    model = LogisticRegression(solver='lbfgs', multi_class='auto', C=1e5)\n",
    "    model.fit(X_train, Y_train)\n",
    "    \n",
    "    X_test = oh_enc.transform(test[[col]]).todense()\n",
    "    Y_test = test['contraceptive']\n",
    "    \n",
    "    if (col != 'contraceptive'):\n",
    "        categories.append(col)\n",
    "        predictions.append(model.score(X_test, Y_test))\n",
    "    \n",
    "    print(col, model.score(X_test, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize as bar graph\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "y_pos = np.arange(len(categories))\n",
    "\n",
    "plt.barh(y_pos, predictions, align='center', alpha=0.5)\n",
    "plt.yticks(y_pos, categories)\n",
    "plt.xlabel('Accuracy')\n",
    "plt.title('Accuracy of Model With Word')\n",
    "plt.xlim(0.43, 0.445)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this graph, it's still not too clear which columns are helping our model and which ones are hurting our model. It's also a bit confusing as to why some columns have the same prediction (44.06779%) despite being completely different datasets. Thus, we decided against using this question to improve our model, instead focusing on other ways."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Modifying"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instead of using a linear regression to model numerical data, what if we try separating the numerical data into ranges so we can use them as categorical data in our logistic regression? To do this, we must find the optimal ranges for each column to optimize the prediction model. Then, we can one-hot-encode this category and perform logistic regression. Before we do any of this, let's see if transforming the numerical columns into categories actually helps our model predict better. We started off with arbitrary ranges to see if this approach helps at all."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We used a range of 20 starting from 0 so that the categories are (-infinity, 20], (20, 30], (30, 40], (40, 50]. \n",
    "# Once again these values were arbitrarily chosen.\n",
    "\n",
    "oh_enc = OneHotEncoder(categories=\"auto\")\n",
    "\n",
    "arr = []\n",
    "for age in data['wife_age']:\n",
    "    if age <= 20:\n",
    "        arr.append(1)\n",
    "    elif age > 20 and age <= 30:\n",
    "        arr.append(2)\n",
    "    elif age > 30 and age <= 40:\n",
    "        arr.append(3)\n",
    "    elif age > 40 and age <= 50:\n",
    "        arr.append(4)\n",
    "    \n",
    "data['age_category'] = arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We used a range of (0, 2], (2, 5], (5, 8], (8, 12], (12, infinity)\n",
    "# Once again these values were arbitrarily chosen.\n",
    "\n",
    "arr_child = []\n",
    "for age in data['num_child']:\n",
    "    if age == 0:\n",
    "        arr_child.append(1)\n",
    "    elif age > 0 and age <= 2:\n",
    "        arr_child.append(2)\n",
    "    elif age > 2 and age <= 5:\n",
    "        arr_child.append(3)\n",
    "    elif age > 5 and age <= 8:\n",
    "        arr_child.append(4)\n",
    "    elif age > 8 and age <= 12:\n",
    "        arr_child.append(5)\n",
    "    else:\n",
    "        arr_child.append(6)\n",
    "    \n",
    "data['num_child_category'] = arr_child"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will test whether or not age_category and num_child_category really did improve our model by performing a logistic regression on the column variables with and without the 2 new categorical data variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First split the training and test data 80-20\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "train, test = train_test_split(data, test_size=0.20, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score With New Columns: 0.5423728813559322\n"
     ]
    }
   ],
   "source": [
    "cols = ['wife_education', 'husband_education', 'wife_religion', 'wife_work', 'husband_occupation',\n",
    "        'standard_living', 'media_exposure', 'age_category', 'num_child_category']\n",
    "\n",
    "oh_enc.fit(train[cols])\n",
    "X_train = oh_enc.transform(train[cols]).todense()\n",
    "Y_train = train[\"contraceptive\"]\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "model = LogisticRegression(solver='lbfgs', multi_class='auto', C=1e5)\n",
    "model.fit(X_train, Y_train)\n",
    "\n",
    "X_test = oh_enc.transform(test[cols]).todense()\n",
    "Y_test = test['contraceptive']\n",
    "\n",
    "print(\"Test Score With New Columns:\",model.score(X_test, Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison\n",
    "Let's see if 54% is an improvement from if we never categorized the data at all. In other words, let's run the same model without the two categorized variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score Without New Columns: 0.46440677966101696\n"
     ]
    }
   ],
   "source": [
    "cols = ['wife_education', 'husband_education', 'wife_religion', 'wife_work', 'husband_occupation',\n",
    "        'standard_living', 'media_exposure']\n",
    "\n",
    "oh_enc.fit(train[cols])\n",
    "X_train = oh_enc.transform(train[cols]).todense()\n",
    "Y_train = train[\"contraceptive\"]\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "model = LogisticRegression(solver='lbfgs', multi_class='auto', C=1e5)\n",
    "model.fit(X_train, Y_train)\n",
    "\n",
    "X_test = oh_enc.transform(test[cols]).todense()\n",
    "Y_test = test['contraceptive']\n",
    "\n",
    "print(\"Test Score Without New Columns:\",model.score(X_test, Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Overall, we ended up with a test accuracy of 54%, which is clearly an improvement from the control value of 46.4% as well as our initial accuracy of 53%. An explanation is that the numerical data dictate the contraceptive type used more than the categorical column variables. For instance, num_child and wife_age have a heavy impact on the contraceptive type. Luckily, the numerical data is well split into categories that are defined by these given ranges, so we could theoretically do better by finding the optimal ranges for this dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After some trial and error through testing enough times, we found the maximal prediction percentage to be around 56% with just the wife_education, husband_education, and husband_occupation columns. From now on, we will be referring to this model (with the categorized data) to be the default classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score using New Model: 0.559322033898305\n"
     ]
    }
   ],
   "source": [
    "cols = ['wife_education', 'husband_education', 'husband_occupation', 'age_category', 'num_child_category']\n",
    "\n",
    "oh_enc.fit(train[cols])\n",
    "X_train = oh_enc.transform(train[cols]).todense()\n",
    "Y_train = train[\"contraceptive\"]\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "model = LogisticRegression(solver='lbfgs', multi_class='auto', C=1e5)\n",
    "model.fit(X_train, Y_train)\n",
    "\n",
    "X_test = oh_enc.transform(test[cols]).todense()\n",
    "Y_test = test['contraceptive']\n",
    "\n",
    "print(\"Test Score using New Model:\", model.score(X_test, Y_test))\n",
    "\n",
    "new_train_accuracy = np.round(model.score(X_train, Y_train), 5)\n",
    "new_cv_accuracy = np.round(np.mean(cross_val_score(model, X_train, y_train, cv = 5)), 5)\n",
    "new_test_accuracy = np.round(model.score(X_test, Y_test), 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We made sure that this model performed better than not including the new columns at all, and sure enough, it would only predict with a score of 45% without these new columns. Now that we know these new columns definitely are helpful to our model, we wanted to analyze how each of the new columns predict. In other words, we wanted to go back to our previous question and examine how well the individual column variables can predict the contraceptive type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age_category 0.41694915254237286\n",
      "num_child_category 0.4915254237288136\n"
     ]
    }
   ],
   "source": [
    "for col in data[['age_category', 'num_child_category']]:\n",
    "    \n",
    "    oh_enc = OneHotEncoder(categories=\"auto\")\n",
    "    oh_enc.fit(train[[col]])\n",
    "    X_train = oh_enc.transform(train[[col]]).todense()\n",
    "    Y_train = train[\"contraceptive\"]\n",
    "\n",
    "    model = LogisticRegression(solver='lbfgs', multi_class='auto', C=1e5)\n",
    "    model.fit(X_train, Y_train)\n",
    "    \n",
    "    X_test = oh_enc.transform(test[[col]]).todense()\n",
    "    Y_test = test['contraceptive']\n",
    "    \n",
    "    if (col != 'contraceptive'):\n",
    "        categories.append(col)\n",
    "        predictions.append(model.score(X_test, Y_test))\n",
    "    \n",
    "    print(col, model.score(X_test, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pos = np.arange(len(categories))\n",
    "\n",
    "plt.barh(y_pos, predictions, align='center', alpha=0.5)\n",
    "plt.yticks(y_pos, categories)\n",
    "plt.xlabel('Accuracy')\n",
    "plt.title('Accuracy of Model with Word')\n",
    "plt.xlim(0.4, 0.5)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus, it is clear the logistic regression model of only one column variable is not a useful way of determining which columns to use while predicting. In this example, both age_category and num_child_category were essential in our overall logistic model, but suffers by itself. age_category does even worse any of the original categorical values, although not including it in our model yields only 51% test accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results and Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "| Model         | Training Set Accuracy | Cross Validation Score | Testing Set Accuracy |\n",
       "|---------------|-----------------------|------------------------|----------------------|\n",
       "| Before Data Modification     | 0.5382              | 0.5128              | 0.50169            |\n",
       "| After Data Modification      | 0.56197              | 0.42532               | 0.55932             |"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "md('''| Model         | Training Set Accuracy | Cross Validation Score | Testing Set Accuracy |\n",
    "|---------------|-----------------------|------------------------|----------------------|\n",
    "| Before Data Modification     | {}              | {}              | {}            |\n",
    "| After Data Modification      | {}              | {}               | {}             |'''.format(log_train_accuracy,\n",
    "                                                                                   log_cv_accuracy,\n",
    "                                                                                   log_test_accuracy,\n",
    "                                                                                   new_train_accuracy,\n",
    "                                                                                   new_cv_accuracy,\n",
    "                                                                                   new_test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Modification Evaluation\n",
    "Clearly, the transformation from numerical to categorical does in fact increase our prediction accuracy in both the training and testing set. However, a notable exception occurs on the cross validation accuracy, where the cross validation score of prediction model actually suffers from this data modification. This surprised us because we would expect the cross validation score to reflect the testing set score, since it is a way of estimating testing accuracy. This sudden drop in cross validation accuracy reflects the nature of splitting numerical values into categorical values, since it only drops so low after adding our two new categorical data variables. After all, the sole purpose of the cross validation accuracy is to estimate the testing set accuracy, which is 20% higher. So is the cross validaton score irrelevant? To make sure that the testing set always performs much better than cross validation, we ran the function on multiple train_test_split random_states, and confirmed this is true. While the cv score is always around 40%, the test accuracy is always around 55%. Thus, for the large part, we can disregard the cross validation accuracy.\n",
    "\n",
    "### Future Improvements\n",
    "As said before, we can possibly increase the accuracy of our prediction model by dynamically choosing the category ranges for the column variables. This will also increase our cross validation score by selecting the most optimal categories for each cross validation iteration. It would rely less on fixed bounds so that the categories can be flexible with whatever data is given. However, the implementation of dynamic bounds is NP, because given a range, we need to find how many groups and the ranges of these groups for optimal predicton. This procedure is most likely optimally done in exponential time, but we agree that it would greatly improve our prediction accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Data 100 Final Project.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
